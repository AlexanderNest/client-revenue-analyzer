package ru.nesterov.bot.handlers.implementation.invocable;

import lombok.SneakyThrows;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import ru.nesterov.bot.dto.GetClientStatisticResponse;
import ru.nesterov.bot.handlers.abstractions.DisplayedCommandHandler;
import ru.nesterov.bot.handlers.callback.ButtonCallback;

import java.text.NumberFormat;
import java.util.Locale;

public class GetClientStatisticHandler extends DisplayedCommandHandler {
    @Override
    public BotApiMethod<?> handle(Update update) {
        BotApiMethod<?> sendMessage;
        if (update.getMessage() == null) {
            sendMessage = sendClientStatistic(update);
        } else {
            sendMessage = sendMonthKeyboard(update.getMessage().getChatId());
        }

        return sendMessage;
    }

    @Override
    public String getCommand() {
        return "–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–ª–∏–µ–Ω—Ç—É";
    }

    @SneakyThrows
    private BotApiMethod<?> sendClientStatistic(Update update, String clientName) {
        long userId = update.getCallbackQuery().getFrom().getId();
        CallbackQuery callbackQuery = update.getCallbackQuery(); //???
        ButtonCallback callback = objectMapper.readValue(callbackQuery.getData(), ButtonCallback.class);
        GetClientStatisticResponse response = client.getClientStatistic(userId, clientName);

        return editMessage(
                callbackQuery.getMessage().getChatId(),
                callbackQuery.getMessage().getMessageId(),
                formatIncomeReport(response),
                null
        );
    }

    private static String formatIncomeReport(GetClientStatisticResponse response) {
        NumberFormat currencyFormat = NumberFormat.getNumberInstance(new Locale("ru", "RU"));
        currencyFormat.setMinimumFractionDigits(0);
        currencyFormat.setMaximumFractionDigits(0);

        return String.format(
                "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞*\n\n" +
                        "%-22s %10s ‚ÇΩ\n" +
                        "%-22s %10s ‚ÇΩ\n" +
                        "-----------------------------\n" +
                        "%-22s %10s ‚ÇΩ\n" +
                        "-----------------------------\n" +
                        "%-22s %10s ‚ÇΩ\n" +
                        "%-22s %10s ‚ÇΩ",
                "–ò–º—è:", currencyFormat.format(response.getName()),
                "ID:", currencyFormat.format(response.getId()),
                "–û–ø–∏—Å–∞–Ω–∏–µ:", currencyFormat.format(response.getDescription()),
                "–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è:", currencyFormat.format(response.getStartDate()),
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è:", currencyFormat.format(response.getServiceDuration()),
                "–¢–µ–ª–µ—Ñ–æ–Ω:", currencyFormat.format(response.getPhone()),
                "–°–æ—Å—Ç–æ—è–≤—à–∏—Ö—Å—è –∑–∞–Ω—è—Ç–∏–π –≤ —á–∞—Å–∞—Ö:", currencyFormat.format(response.getSuccessfulMeetingsHours()),
                "–û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –≤ —á–∞—Å–∞—Ö:", currencyFormat.format(response.getCancelledMeetingsHours()),
                "–î–æ—Ö–æ–¥ –≤ —á–∞—Å:", currencyFormat.format(response.getIncomePerHour()),
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å—Ç–æ—è–≤—à–∏—Ö—Å—è –∑–∞–Ω—è—Ç–∏–π:", currencyFormat.format(response.getSuccessfulEventsCount()),
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏—è:", currencyFormat.format(response.getPlannedCancelledEventsCount()),
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏—è:", currencyFormat.format(response.getNotPlannedCancelledEventsCount()),
                "–°—É–º–∞—Ä–Ω—ã–π –¥–æ—Ö–æ–∂–¥:", currencyFormat.format(response.getTotalIncome())
        );
    }
}
