package ru.nesterov.bot.handlers.implementation.invocable.stateful.getYearBusynessStatistics;

import lombok.SneakyThrows;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.objects.Update;
import ru.nesterov.bot.dto.GetYearBusynessStatisticsRequest;
import ru.nesterov.bot.dto.GetYearBusynessStatisticsResponse;
import ru.nesterov.bot.handlers.abstractions.StatefulCommandHandler;
import ru.nesterov.bot.statemachine.dto.Action;
import ru.nesterov.bot.utils.TelegramUpdateUtils;
import ru.nesterov.core.entity.Role;

import java.util.List;
import java.util.Locale;
import java.util.stream.Collectors;

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–¥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ–¥
 */

@Component
public class GetYearBusynessStatisticsHandler extends StatefulCommandHandler<State, GetYearBusynessStatisticsRequest> {

    public GetYearBusynessStatisticsHandler() {
        super(State.STARTED, GetYearBusynessStatisticsRequest.class);
    }

    @Override
    protected List<Role> getApplicableRoles() {
        return super.getApplicableRoles();
    }

    @Override
    public void initTransitions() {
        stateMachineProvider
                .addTransition(State.STARTED, Action.COMMAND_INPUT, State.WAITING_YEAR_INPUT, this::askForAYear)
                .addTransition(State.WAITING_YEAR_INPUT, Action.ANY_STRING, State.FINISH, this::handleYearInput);
    }

    private BotApiMethod<?> askForAYear(Update update) {
        return getPlainSendMessage(TelegramUpdateUtils.getChatId(update), "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏");
    }

    private BotApiMethod<?> handleYearInput(Update update) {
        int year;
        try {
            year = Integer.parseInt(update.getMessage().getText());
        } catch (NumberFormatException e) {
            return getPlainSendMessage(update.getMessage().getChatId(), "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥");
        }
        getStateMachine(update).getMemory().setYear(year);
        return sendYearStatistics(update);
    }

    @SneakyThrows
    private BotApiMethod<?> sendYearStatistics(Update update) {
        GetYearBusynessStatisticsResponse response = client.getYearBusynessStatistics(TelegramUpdateUtils.getChatId(update),
                getStateMachine(update).getMemory().getYear());
        return getPlainSendMessage(update.getMessage().getChatId(), formatYearStatistics(response));
    }

    private String formatYearStatistics(GetYearBusynessStatisticsResponse response) {
        if (response.getMonths().isEmpty()) {
            return "üìÖ –í—Å—Ç—Ä–µ—á–∏ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã";
        }

        String monthHours = response.getMonths().entrySet().stream()
                .map(monthStatistics -> {
                    String monthName = monthStatistics.getKey();
                    Double hours = monthStatistics.getValue();
                    return String.format(Locale.US, "%s: %.2f —á.", monthName, hours);
                })
                .collect(Collectors.joining("\n"));

        String dayHours = response.getDays().entrySet().stream()
                .map(dayStatistics -> {
                    String dayName = dayStatistics.getKey();
                    Double hours = dayStatistics.getValue();
                    return String.format(Locale.US, "%s: %.2f —á.", dayName, hours);
                })
                .collect(Collectors.joining("\n"));

        return "üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∑–∞ –≥–æ–¥:\n\n" +
                "üóìÔ∏è –ó–∞–Ω—è—Ç–æ—Å—Ç—å –ø–æ –º–µ—Å—è—Ü–∞–º:\n" + monthHours + "\n\n" +
                "üìÖ –ó–∞–Ω—è—Ç–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:\n" + dayHours;
    }

    @Override
    public String getCommand() {
        return "–ê–Ω–∞–ª–∏–∑ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∑–∞ –≥–æ–¥";
    }

}

